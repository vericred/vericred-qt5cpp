/**
 * Vericred API
 * Vericred's API allows you to search for Health Plans that a specific doctor
accepts.

## Getting Started

Visit our [Developer Portal](https://developers.vericred.com) to
create an account.

Once you have created an account, you can create one Application for
Production and another for our Sandbox (select the appropriate Plan when
you create the Application).

## SDKs

Our API follows standard REST conventions, so you can use any HTTP client
to integrate with us. You will likely find it easier to use one of our
[autogenerated SDKs](https://github.com/vericred/?query=vericred-),
which we make available for several common programming languages.

## Authentication

To authenticate, pass the API Key you created in the Developer Portal as
a `Vericred-Api-Key` header.

`curl -H 'Vericred-Api-Key: YOUR_KEY' "https://api.vericred.com/providers?search_term=Foo&zip_code=11215"`

## Versioning

Vericred's API default to the latest version.  However, if you need a specific
version, you can request it with an `Accept-Version` header.

The current version is `v3`.  Previous versions are `v1` and `v2`.

`curl -H 'Vericred-Api-Key: YOUR_KEY' -H 'Accept-Version: v2' "https://api.vericred.com/providers?search_term=Foo&zip_code=11215"`

## Pagination

Endpoints that accept `page` and `per_page` parameters are paginated. They expose
four additional fields that contain data about your position in the response,
namely `Total`, `Per-Page`, `Link`, and `Page` as described in [RFC-5988](https://tools.ietf.org/html/rfc5988).

For example, to display 5 results per page and view the second page of a
`GET` to `/networks`, your final request would be `GET /networks?....page=2&per_page=5`.

## Sideloading

When we return multiple levels of an object graph (e.g. `Provider`s and their `State`s
we sideload the associated data.  In this example, we would provide an Array of
`State`s and a `state_id` for each provider.  This is done primarily to reduce the
payload size since many of the `Provider`s will share a `State`

```
{
  providers: [{ id: 1, state_id: 1}, { id: 2, state_id: 1 }],
  states: [{ id: 1, code: 'NY' }]
}
```

If you need the second level of the object graph, you can just match the
corresponding id.

## Selecting specific data

All endpoints allow you to specify which fields you would like to return.
This allows you to limit the response to contain only the data you need.

For example, let's take a request that returns the following JSON by default

```
{
  provider: {
    id: 1,
    name: 'John',
    phone: '1234567890',
    field_we_dont_care_about: 'value_we_dont_care_about'
  },
  states: [{
    id: 1,
    name: 'New York',
    code: 'NY',
    field_we_dont_care_about: 'value_we_dont_care_about'
  }]
}
```

To limit our results to only return the fields we care about, we specify the
`select` query string parameter for the corresponding fields in the JSON
document.

In this case, we want to select `name` and `phone` from the `provider` key,
so we would add the parameters `select=provider.name,provider.phone`.
We also want the `name` and `code` from the `states` key, so we would
add the parameters `select=states.name,staes.code`.  The id field of
each document is always returned whether or not it is requested.

Our final request would be `GET /providers/12345?select=provider.name,provider.phone,states.name,states.code`

The response would be

```
{
  provider: {
    id: 1,
    name: 'John',
    phone: '1234567890'
  },
  states: [{
    id: 1,
    name: 'New York',
    code: 'NY'
  }]
}
```

## Benefits summary format
Benefit cost-share strings are formatted to capture:
 * Network tiers
 * Compound or conditional cost-share
 * Limits on the cost-share
 * Benefit-specific maximum out-of-pocket costs

**Example #1**
As an example, we would represent [this Summary of Benefits &amp; Coverage](https://s3.amazonaws.com/vericred-data/SBC/2017/33602TX0780032.pdf) as:

* **Hospital stay facility fees**:
  - Network Provider: `$400 copay/admit plus 20% coinsurance`
  - Out-of-Network Provider: `$1,500 copay/admit plus 50% coinsurance`
  - Vericred's format for this benefit: `In-Network: $400 before deductible then 20% after deductible / Out-of-Network: $1,500 before deductible then 50% after deductible`

* **Rehabilitation services:**
  - Network Provider: `20% coinsurance`
  - Out-of-Network Provider: `50% coinsurance`
  - Limitations & Exceptions: `35 visit maximum per benefit period combined with Chiropractic care.`
  - Vericred's format for this benefit: `In-Network: 20% after deductible / Out-of-Network: 50% after deductible | limit: 35 visit(s) per Benefit Period`

**Example #2**
In [this other Summary of Benefits &amp; Coverage](https://s3.amazonaws.com/vericred-data/SBC/2017/40733CA0110568.pdf), the **specialty_drugs** cost-share has a maximum out-of-pocket for in-network pharmacies.
* **Specialty drugs:**
  - Network Provider: `40% coinsurance up to a $500 maximum for up to a 30 day supply`
  - Out-of-Network Provider `Not covered`
  - Vericred's format for this benefit: `In-Network: 40% after deductible, up to $500 per script / Out-of-Network: 100%`

**BNF**

Here's a description of the benefits summary string, represented as a context-free grammar:

```
<cost-share>     ::= <tier> <opt-num-prefix> <value> <opt-per-unit> <deductible> <tier-limit> "/" <tier> <opt-num-prefix> <value> <opt-per-unit> <deductible> "|" <benefit-limit>
<tier>           ::= "In-Network:" | "In-Network-Tier-2:" | "Out-of-Network:"
<opt-num-prefix> ::= "first" <num> <unit> | ""
<unit>           ::= "day(s)" | "visit(s)" | "exam(s)" | "item(s)"
<value>          ::= <ddct_moop> | <copay> | <coinsurance> | <compound> | "unknown" | "Not Applicable"
<compound>       ::= <copay> <deductible> "then" <coinsurance> <deductible> | <copay> <deductible> "then" <copay> <deductible> | <coinsurance> <deductible> "then" <coinsurance> <deductible>
<copay>          ::= "$" <num>
<coinsurace>     ::= <num> "%"
<ddct_moop>      ::= <copay> | "Included in Medical" | "Unlimited"
<opt-per-unit>   ::= "per day" | "per visit" | "per stay" | ""
<deductible>     ::= "before deductible" | "after deductible" | ""
<tier-limit>     ::= ", " <limit> | ""
<benefit-limit>  ::= <limit> | ""
```


 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGVendoredPlanBulk.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGVendoredPlanBulk::SWGVendoredPlanBulk(QString* json) {
    init();
    this->fromJson(*json);
}

SWGVendoredPlanBulk::SWGVendoredPlanBulk() {
    init();
}

SWGVendoredPlanBulk::~SWGVendoredPlanBulk() {
    this->cleanup();
}

void
SWGVendoredPlanBulk::init() {
    adult_dental = false;
age29_rider = false;
ambulance = new QString("");
benefits_summary_url = new QString("");
buy_link = new QString("");
carrier_name = new QString("");
child_dental = false;
child_eyewear = new QString("");
child_eye_exam = new QString("");
customer_service_phone_number = new QString("");
durable_medical_equipment = new QString("");
diagnostic_test = new QString("");
display_name = new QString("");
dp_rider = false;
drug_formulary_url = new QString("");
effective_date = new QString("");
expiration_date = new QString("");
emergency_room = new QString("");
family_drug_deductible = new QString("");
family_drug_moop = new QString("");
family_medical_deductible = new QString("");
family_medical_moop = new QString("");
fp_rider = false;
generic_drugs = new QString("");
habilitation_services = new QString("");
hios_issuer_id = new QString("");
home_health_care = new QString("");
hospice_service = new QString("");
hsa_eligible = false;
id = new QString("");
imaging = new QString("");
in_network_ids = new QList<qint32>();
individual_drug_deductible = new QString("");
individual_drug_moop = new QString("");
individual_medical_deductible = new QString("");
individual_medical_moop = new QString("");
inpatient_birth = new QString("");
inpatient_facility = new QString("");
inpatient_mental_health = new QString("");
inpatient_physician = new QString("");
inpatient_substance = new QString("");
level = new QString("");
logo_url = new QString("");
name = new QString("");
network_size = 0;
non_preferred_brand_drugs = new QString("");
on_market = false;
off_market = false;
out_of_network_coverage = false;
out_of_network_ids = new QList<qint32>();
outpatient_facility = new QString("");
outpatient_mental_health = new QString("");
outpatient_physician = new QString("");
outpatient_substance = new QString("");
plan_market = new QString("");
plan_type = new QString("");
preferred_brand_drugs = new QString("");
prenatal_postnatal_care = new QString("");
preventative_care = new QString("");
premium_subsidized = 0.0;
premium = 0.0;
premium_source = new QString("");
primary_care_physician = new QString("");
rehabilitation_services = new QString("");
service_area_id = new QString("");
skilled_nursing = new QString("");
specialist = new QString("");
specialty_drugs = new QString("");
urgent_care = new QString("");
vendor_id = new QString("");
}

void
SWGVendoredPlanBulk::cleanup() {
    

if(ambulance != NULL) {
        delete ambulance;
    }
if(benefits_summary_url != NULL) {
        delete benefits_summary_url;
    }
if(buy_link != NULL) {
        delete buy_link;
    }
if(carrier_name != NULL) {
        delete carrier_name;
    }

if(child_eyewear != NULL) {
        delete child_eyewear;
    }
if(child_eye_exam != NULL) {
        delete child_eye_exam;
    }
if(customer_service_phone_number != NULL) {
        delete customer_service_phone_number;
    }
if(durable_medical_equipment != NULL) {
        delete durable_medical_equipment;
    }
if(diagnostic_test != NULL) {
        delete diagnostic_test;
    }
if(display_name != NULL) {
        delete display_name;
    }

if(drug_formulary_url != NULL) {
        delete drug_formulary_url;
    }
if(effective_date != NULL) {
        delete effective_date;
    }
if(expiration_date != NULL) {
        delete expiration_date;
    }
if(emergency_room != NULL) {
        delete emergency_room;
    }
if(family_drug_deductible != NULL) {
        delete family_drug_deductible;
    }
if(family_drug_moop != NULL) {
        delete family_drug_moop;
    }
if(family_medical_deductible != NULL) {
        delete family_medical_deductible;
    }
if(family_medical_moop != NULL) {
        delete family_medical_moop;
    }

if(generic_drugs != NULL) {
        delete generic_drugs;
    }
if(habilitation_services != NULL) {
        delete habilitation_services;
    }
if(hios_issuer_id != NULL) {
        delete hios_issuer_id;
    }
if(home_health_care != NULL) {
        delete home_health_care;
    }
if(hospice_service != NULL) {
        delete hospice_service;
    }

if(id != NULL) {
        delete id;
    }
if(imaging != NULL) {
        delete imaging;
    }

if(individual_drug_deductible != NULL) {
        delete individual_drug_deductible;
    }
if(individual_drug_moop != NULL) {
        delete individual_drug_moop;
    }
if(individual_medical_deductible != NULL) {
        delete individual_medical_deductible;
    }
if(individual_medical_moop != NULL) {
        delete individual_medical_moop;
    }
if(inpatient_birth != NULL) {
        delete inpatient_birth;
    }
if(inpatient_facility != NULL) {
        delete inpatient_facility;
    }
if(inpatient_mental_health != NULL) {
        delete inpatient_mental_health;
    }
if(inpatient_physician != NULL) {
        delete inpatient_physician;
    }
if(inpatient_substance != NULL) {
        delete inpatient_substance;
    }
if(level != NULL) {
        delete level;
    }
if(logo_url != NULL) {
        delete logo_url;
    }
if(name != NULL) {
        delete name;
    }

if(non_preferred_brand_drugs != NULL) {
        delete non_preferred_brand_drugs;
    }




if(outpatient_facility != NULL) {
        delete outpatient_facility;
    }
if(outpatient_mental_health != NULL) {
        delete outpatient_mental_health;
    }
if(outpatient_physician != NULL) {
        delete outpatient_physician;
    }
if(outpatient_substance != NULL) {
        delete outpatient_substance;
    }
if(plan_market != NULL) {
        delete plan_market;
    }
if(plan_type != NULL) {
        delete plan_type;
    }
if(preferred_brand_drugs != NULL) {
        delete preferred_brand_drugs;
    }
if(prenatal_postnatal_care != NULL) {
        delete prenatal_postnatal_care;
    }
if(preventative_care != NULL) {
        delete preventative_care;
    }
if(premium_subsidized != NULL) {
        delete premium_subsidized;
    }
if(premium != NULL) {
        delete premium;
    }
if(premium_source != NULL) {
        delete premium_source;
    }
if(primary_care_physician != NULL) {
        delete primary_care_physician;
    }
if(rehabilitation_services != NULL) {
        delete rehabilitation_services;
    }
if(service_area_id != NULL) {
        delete service_area_id;
    }
if(skilled_nursing != NULL) {
        delete skilled_nursing;
    }
if(specialist != NULL) {
        delete specialist;
    }
if(specialty_drugs != NULL) {
        delete specialty_drugs;
    }
if(urgent_care != NULL) {
        delete urgent_care;
    }
if(vendor_id != NULL) {
        delete vendor_id;
    }
}

SWGVendoredPlanBulk*
SWGVendoredPlanBulk::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGVendoredPlanBulk::fromJsonObject(QJsonObject &pJson) {
    setValue(&adult_dental, pJson["adult_dental"], "bool", "");
setValue(&age29_rider, pJson["age29_rider"], "bool", "");
setValue(&ambulance, pJson["ambulance"], "QString", "QString");
setValue(&benefits_summary_url, pJson["benefits_summary_url"], "QString", "QString");
setValue(&buy_link, pJson["buy_link"], "QString", "QString");
setValue(&carrier_name, pJson["carrier_name"], "QString", "QString");
setValue(&child_dental, pJson["child_dental"], "bool", "");
setValue(&child_eyewear, pJson["child_eyewear"], "QString", "QString");
setValue(&child_eye_exam, pJson["child_eye_exam"], "QString", "QString");
setValue(&customer_service_phone_number, pJson["customer_service_phone_number"], "QString", "QString");
setValue(&durable_medical_equipment, pJson["durable_medical_equipment"], "QString", "QString");
setValue(&diagnostic_test, pJson["diagnostic_test"], "QString", "QString");
setValue(&display_name, pJson["display_name"], "QString", "QString");
setValue(&dp_rider, pJson["dp_rider"], "bool", "");
setValue(&drug_formulary_url, pJson["drug_formulary_url"], "QString", "QString");
setValue(&effective_date, pJson["effective_date"], "QString", "QString");
setValue(&expiration_date, pJson["expiration_date"], "QString", "QString");
setValue(&emergency_room, pJson["emergency_room"], "QString", "QString");
setValue(&family_drug_deductible, pJson["family_drug_deductible"], "QString", "QString");
setValue(&family_drug_moop, pJson["family_drug_moop"], "QString", "QString");
setValue(&family_medical_deductible, pJson["family_medical_deductible"], "QString", "QString");
setValue(&family_medical_moop, pJson["family_medical_moop"], "QString", "QString");
setValue(&fp_rider, pJson["fp_rider"], "bool", "");
setValue(&generic_drugs, pJson["generic_drugs"], "QString", "QString");
setValue(&habilitation_services, pJson["habilitation_services"], "QString", "QString");
setValue(&hios_issuer_id, pJson["hios_issuer_id"], "QString", "QString");
setValue(&home_health_care, pJson["home_health_care"], "QString", "QString");
setValue(&hospice_service, pJson["hospice_service"], "QString", "QString");
setValue(&hsa_eligible, pJson["hsa_eligible"], "bool", "");
setValue(&id, pJson["id"], "QString", "QString");
setValue(&imaging, pJson["imaging"], "QString", "QString");
setValue(&in_network_ids, pJson["in_network_ids"], "QList", "");
setValue(&individual_drug_deductible, pJson["individual_drug_deductible"], "QString", "QString");
setValue(&individual_drug_moop, pJson["individual_drug_moop"], "QString", "QString");
setValue(&individual_medical_deductible, pJson["individual_medical_deductible"], "QString", "QString");
setValue(&individual_medical_moop, pJson["individual_medical_moop"], "QString", "QString");
setValue(&inpatient_birth, pJson["inpatient_birth"], "QString", "QString");
setValue(&inpatient_facility, pJson["inpatient_facility"], "QString", "QString");
setValue(&inpatient_mental_health, pJson["inpatient_mental_health"], "QString", "QString");
setValue(&inpatient_physician, pJson["inpatient_physician"], "QString", "QString");
setValue(&inpatient_substance, pJson["inpatient_substance"], "QString", "QString");
setValue(&level, pJson["level"], "QString", "QString");
setValue(&logo_url, pJson["logo_url"], "QString", "QString");
setValue(&name, pJson["name"], "QString", "QString");
setValue(&network_size, pJson["network_size"], "qint32", "");
setValue(&non_preferred_brand_drugs, pJson["non_preferred_brand_drugs"], "QString", "QString");
setValue(&on_market, pJson["on_market"], "bool", "");
setValue(&off_market, pJson["off_market"], "bool", "");
setValue(&out_of_network_coverage, pJson["out_of_network_coverage"], "bool", "");
setValue(&out_of_network_ids, pJson["out_of_network_ids"], "QList", "");
setValue(&outpatient_facility, pJson["outpatient_facility"], "QString", "QString");
setValue(&outpatient_mental_health, pJson["outpatient_mental_health"], "QString", "QString");
setValue(&outpatient_physician, pJson["outpatient_physician"], "QString", "QString");
setValue(&outpatient_substance, pJson["outpatient_substance"], "QString", "QString");
setValue(&plan_market, pJson["plan_market"], "QString", "QString");
setValue(&plan_type, pJson["plan_type"], "QString", "QString");
setValue(&preferred_brand_drugs, pJson["preferred_brand_drugs"], "QString", "QString");
setValue(&prenatal_postnatal_care, pJson["prenatal_postnatal_care"], "QString", "QString");
setValue(&preventative_care, pJson["preventative_care"], "QString", "QString");
setValue(&premium_subsidized, pJson["premium_subsidized"], "SWGNumber", "SWGNumber");
setValue(&premium, pJson["premium"], "SWGNumber", "SWGNumber");
setValue(&premium_source, pJson["premium_source"], "QString", "QString");
setValue(&primary_care_physician, pJson["primary_care_physician"], "QString", "QString");
setValue(&rehabilitation_services, pJson["rehabilitation_services"], "QString", "QString");
setValue(&service_area_id, pJson["service_area_id"], "QString", "QString");
setValue(&skilled_nursing, pJson["skilled_nursing"], "QString", "QString");
setValue(&specialist, pJson["specialist"], "QString", "QString");
setValue(&specialty_drugs, pJson["specialty_drugs"], "QString", "QString");
setValue(&urgent_care, pJson["urgent_care"], "QString", "QString");
setValue(&vendor_id, pJson["vendor_id"], "QString", "QString");
}

QString
SWGVendoredPlanBulk::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGVendoredPlanBulk::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    obj->insert("adult_dental", QJsonValue(adult_dental));
obj->insert("age29_rider", QJsonValue(age29_rider));

    
    toJsonValue(QString("ambulance"), ambulance, obj, QString("QString"));
    
        

    
    toJsonValue(QString("benefits_summary_url"), benefits_summary_url, obj, QString("QString"));
    
        

    
    toJsonValue(QString("buy_link"), buy_link, obj, QString("QString"));
    
        

    
    toJsonValue(QString("carrier_name"), carrier_name, obj, QString("QString"));
    
        
obj->insert("child_dental", QJsonValue(child_dental));

    
    toJsonValue(QString("child_eyewear"), child_eyewear, obj, QString("QString"));
    
        

    
    toJsonValue(QString("child_eye_exam"), child_eye_exam, obj, QString("QString"));
    
        

    
    toJsonValue(QString("customer_service_phone_number"), customer_service_phone_number, obj, QString("QString"));
    
        

    
    toJsonValue(QString("durable_medical_equipment"), durable_medical_equipment, obj, QString("QString"));
    
        

    
    toJsonValue(QString("diagnostic_test"), diagnostic_test, obj, QString("QString"));
    
        

    
    toJsonValue(QString("display_name"), display_name, obj, QString("QString"));
    
        
obj->insert("dp_rider", QJsonValue(dp_rider));

    
    toJsonValue(QString("drug_formulary_url"), drug_formulary_url, obj, QString("QString"));
    
        

    
    toJsonValue(QString("effective_date"), effective_date, obj, QString("QString"));
    
        

    
    toJsonValue(QString("expiration_date"), expiration_date, obj, QString("QString"));
    
        

    
    toJsonValue(QString("emergency_room"), emergency_room, obj, QString("QString"));
    
        

    
    toJsonValue(QString("family_drug_deductible"), family_drug_deductible, obj, QString("QString"));
    
        

    
    toJsonValue(QString("family_drug_moop"), family_drug_moop, obj, QString("QString"));
    
        

    
    toJsonValue(QString("family_medical_deductible"), family_medical_deductible, obj, QString("QString"));
    
        

    
    toJsonValue(QString("family_medical_moop"), family_medical_moop, obj, QString("QString"));
    
        
obj->insert("fp_rider", QJsonValue(fp_rider));

    
    toJsonValue(QString("generic_drugs"), generic_drugs, obj, QString("QString"));
    
        

    
    toJsonValue(QString("habilitation_services"), habilitation_services, obj, QString("QString"));
    
        

    
    toJsonValue(QString("hios_issuer_id"), hios_issuer_id, obj, QString("QString"));
    
        

    
    toJsonValue(QString("home_health_care"), home_health_care, obj, QString("QString"));
    
        

    
    toJsonValue(QString("hospice_service"), hospice_service, obj, QString("QString"));
    
        
obj->insert("hsa_eligible", QJsonValue(hsa_eligible));

    
    toJsonValue(QString("id"), id, obj, QString("QString"));
    
        

    
    toJsonValue(QString("imaging"), imaging, obj, QString("QString"));
    
        
obj->insert("in_network_ids", QJsonValue(in_network_ids));

    
    toJsonValue(QString("individual_drug_deductible"), individual_drug_deductible, obj, QString("QString"));
    
        

    
    toJsonValue(QString("individual_drug_moop"), individual_drug_moop, obj, QString("QString"));
    
        

    
    toJsonValue(QString("individual_medical_deductible"), individual_medical_deductible, obj, QString("QString"));
    
        

    
    toJsonValue(QString("individual_medical_moop"), individual_medical_moop, obj, QString("QString"));
    
        

    
    toJsonValue(QString("inpatient_birth"), inpatient_birth, obj, QString("QString"));
    
        

    
    toJsonValue(QString("inpatient_facility"), inpatient_facility, obj, QString("QString"));
    
        

    
    toJsonValue(QString("inpatient_mental_health"), inpatient_mental_health, obj, QString("QString"));
    
        

    
    toJsonValue(QString("inpatient_physician"), inpatient_physician, obj, QString("QString"));
    
        

    
    toJsonValue(QString("inpatient_substance"), inpatient_substance, obj, QString("QString"));
    
        

    
    toJsonValue(QString("level"), level, obj, QString("QString"));
    
        

    
    toJsonValue(QString("logo_url"), logo_url, obj, QString("QString"));
    
        

    
    toJsonValue(QString("name"), name, obj, QString("QString"));
    
        
obj->insert("network_size", QJsonValue(network_size));

    
    toJsonValue(QString("non_preferred_brand_drugs"), non_preferred_brand_drugs, obj, QString("QString"));
    
        
obj->insert("on_market", QJsonValue(on_market));
obj->insert("off_market", QJsonValue(off_market));
obj->insert("out_of_network_coverage", QJsonValue(out_of_network_coverage));
obj->insert("out_of_network_ids", QJsonValue(out_of_network_ids));

    
    toJsonValue(QString("outpatient_facility"), outpatient_facility, obj, QString("QString"));
    
        

    
    toJsonValue(QString("outpatient_mental_health"), outpatient_mental_health, obj, QString("QString"));
    
        

    
    toJsonValue(QString("outpatient_physician"), outpatient_physician, obj, QString("QString"));
    
        

    
    toJsonValue(QString("outpatient_substance"), outpatient_substance, obj, QString("QString"));
    
        

    
    toJsonValue(QString("plan_market"), plan_market, obj, QString("QString"));
    
        

    
    toJsonValue(QString("plan_type"), plan_type, obj, QString("QString"));
    
        

    
    toJsonValue(QString("preferred_brand_drugs"), preferred_brand_drugs, obj, QString("QString"));
    
        

    
    toJsonValue(QString("prenatal_postnatal_care"), prenatal_postnatal_care, obj, QString("QString"));
    
        

    
    toJsonValue(QString("preventative_care"), preventative_care, obj, QString("QString"));
    
        

    
    toJsonValue(QString("premium_subsidized"), premium_subsidized, obj, QString("SWGNumber"));
    
        

    
    toJsonValue(QString("premium"), premium, obj, QString("SWGNumber"));
    
        

    
    toJsonValue(QString("premium_source"), premium_source, obj, QString("QString"));
    
        

    
    toJsonValue(QString("primary_care_physician"), primary_care_physician, obj, QString("QString"));
    
        

    
    toJsonValue(QString("rehabilitation_services"), rehabilitation_services, obj, QString("QString"));
    
        

    
    toJsonValue(QString("service_area_id"), service_area_id, obj, QString("QString"));
    
        

    
    toJsonValue(QString("skilled_nursing"), skilled_nursing, obj, QString("QString"));
    
        

    
    toJsonValue(QString("specialist"), specialist, obj, QString("QString"));
    
        

    
    toJsonValue(QString("specialty_drugs"), specialty_drugs, obj, QString("QString"));
    
        

    
    toJsonValue(QString("urgent_care"), urgent_care, obj, QString("QString"));
    
        

    
    toJsonValue(QString("vendor_id"), vendor_id, obj, QString("QString"));
    
        

    return obj;
}

bool
SWGVendoredPlanBulk::getAdultDental() {
    return adult_dental;
}
void
SWGVendoredPlanBulk::setAdultDental(bool adult_dental) {
    this->adult_dental = adult_dental;
}

bool
SWGVendoredPlanBulk::getAge29Rider() {
    return age29_rider;
}
void
SWGVendoredPlanBulk::setAge29Rider(bool age29_rider) {
    this->age29_rider = age29_rider;
}

QString*
SWGVendoredPlanBulk::getAmbulance() {
    return ambulance;
}
void
SWGVendoredPlanBulk::setAmbulance(QString* ambulance) {
    this->ambulance = ambulance;
}

QString*
SWGVendoredPlanBulk::getBenefitsSummaryUrl() {
    return benefits_summary_url;
}
void
SWGVendoredPlanBulk::setBenefitsSummaryUrl(QString* benefits_summary_url) {
    this->benefits_summary_url = benefits_summary_url;
}

QString*
SWGVendoredPlanBulk::getBuyLink() {
    return buy_link;
}
void
SWGVendoredPlanBulk::setBuyLink(QString* buy_link) {
    this->buy_link = buy_link;
}

QString*
SWGVendoredPlanBulk::getCarrierName() {
    return carrier_name;
}
void
SWGVendoredPlanBulk::setCarrierName(QString* carrier_name) {
    this->carrier_name = carrier_name;
}

bool
SWGVendoredPlanBulk::getChildDental() {
    return child_dental;
}
void
SWGVendoredPlanBulk::setChildDental(bool child_dental) {
    this->child_dental = child_dental;
}

QString*
SWGVendoredPlanBulk::getChildEyewear() {
    return child_eyewear;
}
void
SWGVendoredPlanBulk::setChildEyewear(QString* child_eyewear) {
    this->child_eyewear = child_eyewear;
}

QString*
SWGVendoredPlanBulk::getChildEyeExam() {
    return child_eye_exam;
}
void
SWGVendoredPlanBulk::setChildEyeExam(QString* child_eye_exam) {
    this->child_eye_exam = child_eye_exam;
}

QString*
SWGVendoredPlanBulk::getCustomerServicePhoneNumber() {
    return customer_service_phone_number;
}
void
SWGVendoredPlanBulk::setCustomerServicePhoneNumber(QString* customer_service_phone_number) {
    this->customer_service_phone_number = customer_service_phone_number;
}

QString*
SWGVendoredPlanBulk::getDurableMedicalEquipment() {
    return durable_medical_equipment;
}
void
SWGVendoredPlanBulk::setDurableMedicalEquipment(QString* durable_medical_equipment) {
    this->durable_medical_equipment = durable_medical_equipment;
}

QString*
SWGVendoredPlanBulk::getDiagnosticTest() {
    return diagnostic_test;
}
void
SWGVendoredPlanBulk::setDiagnosticTest(QString* diagnostic_test) {
    this->diagnostic_test = diagnostic_test;
}

QString*
SWGVendoredPlanBulk::getDisplayName() {
    return display_name;
}
void
SWGVendoredPlanBulk::setDisplayName(QString* display_name) {
    this->display_name = display_name;
}

bool
SWGVendoredPlanBulk::getDpRider() {
    return dp_rider;
}
void
SWGVendoredPlanBulk::setDpRider(bool dp_rider) {
    this->dp_rider = dp_rider;
}

QString*
SWGVendoredPlanBulk::getDrugFormularyUrl() {
    return drug_formulary_url;
}
void
SWGVendoredPlanBulk::setDrugFormularyUrl(QString* drug_formulary_url) {
    this->drug_formulary_url = drug_formulary_url;
}

QString*
SWGVendoredPlanBulk::getEffectiveDate() {
    return effective_date;
}
void
SWGVendoredPlanBulk::setEffectiveDate(QString* effective_date) {
    this->effective_date = effective_date;
}

QString*
SWGVendoredPlanBulk::getExpirationDate() {
    return expiration_date;
}
void
SWGVendoredPlanBulk::setExpirationDate(QString* expiration_date) {
    this->expiration_date = expiration_date;
}

QString*
SWGVendoredPlanBulk::getEmergencyRoom() {
    return emergency_room;
}
void
SWGVendoredPlanBulk::setEmergencyRoom(QString* emergency_room) {
    this->emergency_room = emergency_room;
}

QString*
SWGVendoredPlanBulk::getFamilyDrugDeductible() {
    return family_drug_deductible;
}
void
SWGVendoredPlanBulk::setFamilyDrugDeductible(QString* family_drug_deductible) {
    this->family_drug_deductible = family_drug_deductible;
}

QString*
SWGVendoredPlanBulk::getFamilyDrugMoop() {
    return family_drug_moop;
}
void
SWGVendoredPlanBulk::setFamilyDrugMoop(QString* family_drug_moop) {
    this->family_drug_moop = family_drug_moop;
}

QString*
SWGVendoredPlanBulk::getFamilyMedicalDeductible() {
    return family_medical_deductible;
}
void
SWGVendoredPlanBulk::setFamilyMedicalDeductible(QString* family_medical_deductible) {
    this->family_medical_deductible = family_medical_deductible;
}

QString*
SWGVendoredPlanBulk::getFamilyMedicalMoop() {
    return family_medical_moop;
}
void
SWGVendoredPlanBulk::setFamilyMedicalMoop(QString* family_medical_moop) {
    this->family_medical_moop = family_medical_moop;
}

bool
SWGVendoredPlanBulk::getFpRider() {
    return fp_rider;
}
void
SWGVendoredPlanBulk::setFpRider(bool fp_rider) {
    this->fp_rider = fp_rider;
}

QString*
SWGVendoredPlanBulk::getGenericDrugs() {
    return generic_drugs;
}
void
SWGVendoredPlanBulk::setGenericDrugs(QString* generic_drugs) {
    this->generic_drugs = generic_drugs;
}

QString*
SWGVendoredPlanBulk::getHabilitationServices() {
    return habilitation_services;
}
void
SWGVendoredPlanBulk::setHabilitationServices(QString* habilitation_services) {
    this->habilitation_services = habilitation_services;
}

QString*
SWGVendoredPlanBulk::getHiosIssuerId() {
    return hios_issuer_id;
}
void
SWGVendoredPlanBulk::setHiosIssuerId(QString* hios_issuer_id) {
    this->hios_issuer_id = hios_issuer_id;
}

QString*
SWGVendoredPlanBulk::getHomeHealthCare() {
    return home_health_care;
}
void
SWGVendoredPlanBulk::setHomeHealthCare(QString* home_health_care) {
    this->home_health_care = home_health_care;
}

QString*
SWGVendoredPlanBulk::getHospiceService() {
    return hospice_service;
}
void
SWGVendoredPlanBulk::setHospiceService(QString* hospice_service) {
    this->hospice_service = hospice_service;
}

bool
SWGVendoredPlanBulk::getHsaEligible() {
    return hsa_eligible;
}
void
SWGVendoredPlanBulk::setHsaEligible(bool hsa_eligible) {
    this->hsa_eligible = hsa_eligible;
}

QString*
SWGVendoredPlanBulk::getId() {
    return id;
}
void
SWGVendoredPlanBulk::setId(QString* id) {
    this->id = id;
}

QString*
SWGVendoredPlanBulk::getImaging() {
    return imaging;
}
void
SWGVendoredPlanBulk::setImaging(QString* imaging) {
    this->imaging = imaging;
}

QList<qint32>*
SWGVendoredPlanBulk::getInNetworkIds() {
    return in_network_ids;
}
void
SWGVendoredPlanBulk::setInNetworkIds(QList<qint32>* in_network_ids) {
    this->in_network_ids = in_network_ids;
}

QString*
SWGVendoredPlanBulk::getIndividualDrugDeductible() {
    return individual_drug_deductible;
}
void
SWGVendoredPlanBulk::setIndividualDrugDeductible(QString* individual_drug_deductible) {
    this->individual_drug_deductible = individual_drug_deductible;
}

QString*
SWGVendoredPlanBulk::getIndividualDrugMoop() {
    return individual_drug_moop;
}
void
SWGVendoredPlanBulk::setIndividualDrugMoop(QString* individual_drug_moop) {
    this->individual_drug_moop = individual_drug_moop;
}

QString*
SWGVendoredPlanBulk::getIndividualMedicalDeductible() {
    return individual_medical_deductible;
}
void
SWGVendoredPlanBulk::setIndividualMedicalDeductible(QString* individual_medical_deductible) {
    this->individual_medical_deductible = individual_medical_deductible;
}

QString*
SWGVendoredPlanBulk::getIndividualMedicalMoop() {
    return individual_medical_moop;
}
void
SWGVendoredPlanBulk::setIndividualMedicalMoop(QString* individual_medical_moop) {
    this->individual_medical_moop = individual_medical_moop;
}

QString*
SWGVendoredPlanBulk::getInpatientBirth() {
    return inpatient_birth;
}
void
SWGVendoredPlanBulk::setInpatientBirth(QString* inpatient_birth) {
    this->inpatient_birth = inpatient_birth;
}

QString*
SWGVendoredPlanBulk::getInpatientFacility() {
    return inpatient_facility;
}
void
SWGVendoredPlanBulk::setInpatientFacility(QString* inpatient_facility) {
    this->inpatient_facility = inpatient_facility;
}

QString*
SWGVendoredPlanBulk::getInpatientMentalHealth() {
    return inpatient_mental_health;
}
void
SWGVendoredPlanBulk::setInpatientMentalHealth(QString* inpatient_mental_health) {
    this->inpatient_mental_health = inpatient_mental_health;
}

QString*
SWGVendoredPlanBulk::getInpatientPhysician() {
    return inpatient_physician;
}
void
SWGVendoredPlanBulk::setInpatientPhysician(QString* inpatient_physician) {
    this->inpatient_physician = inpatient_physician;
}

QString*
SWGVendoredPlanBulk::getInpatientSubstance() {
    return inpatient_substance;
}
void
SWGVendoredPlanBulk::setInpatientSubstance(QString* inpatient_substance) {
    this->inpatient_substance = inpatient_substance;
}

QString*
SWGVendoredPlanBulk::getLevel() {
    return level;
}
void
SWGVendoredPlanBulk::setLevel(QString* level) {
    this->level = level;
}

QString*
SWGVendoredPlanBulk::getLogoUrl() {
    return logo_url;
}
void
SWGVendoredPlanBulk::setLogoUrl(QString* logo_url) {
    this->logo_url = logo_url;
}

QString*
SWGVendoredPlanBulk::getName() {
    return name;
}
void
SWGVendoredPlanBulk::setName(QString* name) {
    this->name = name;
}

qint32
SWGVendoredPlanBulk::getNetworkSize() {
    return network_size;
}
void
SWGVendoredPlanBulk::setNetworkSize(qint32 network_size) {
    this->network_size = network_size;
}

QString*
SWGVendoredPlanBulk::getNonPreferredBrandDrugs() {
    return non_preferred_brand_drugs;
}
void
SWGVendoredPlanBulk::setNonPreferredBrandDrugs(QString* non_preferred_brand_drugs) {
    this->non_preferred_brand_drugs = non_preferred_brand_drugs;
}

bool
SWGVendoredPlanBulk::getOnMarket() {
    return on_market;
}
void
SWGVendoredPlanBulk::setOnMarket(bool on_market) {
    this->on_market = on_market;
}

bool
SWGVendoredPlanBulk::getOffMarket() {
    return off_market;
}
void
SWGVendoredPlanBulk::setOffMarket(bool off_market) {
    this->off_market = off_market;
}

bool
SWGVendoredPlanBulk::getOutOfNetworkCoverage() {
    return out_of_network_coverage;
}
void
SWGVendoredPlanBulk::setOutOfNetworkCoverage(bool out_of_network_coverage) {
    this->out_of_network_coverage = out_of_network_coverage;
}

QList<qint32>*
SWGVendoredPlanBulk::getOutOfNetworkIds() {
    return out_of_network_ids;
}
void
SWGVendoredPlanBulk::setOutOfNetworkIds(QList<qint32>* out_of_network_ids) {
    this->out_of_network_ids = out_of_network_ids;
}

QString*
SWGVendoredPlanBulk::getOutpatientFacility() {
    return outpatient_facility;
}
void
SWGVendoredPlanBulk::setOutpatientFacility(QString* outpatient_facility) {
    this->outpatient_facility = outpatient_facility;
}

QString*
SWGVendoredPlanBulk::getOutpatientMentalHealth() {
    return outpatient_mental_health;
}
void
SWGVendoredPlanBulk::setOutpatientMentalHealth(QString* outpatient_mental_health) {
    this->outpatient_mental_health = outpatient_mental_health;
}

QString*
SWGVendoredPlanBulk::getOutpatientPhysician() {
    return outpatient_physician;
}
void
SWGVendoredPlanBulk::setOutpatientPhysician(QString* outpatient_physician) {
    this->outpatient_physician = outpatient_physician;
}

QString*
SWGVendoredPlanBulk::getOutpatientSubstance() {
    return outpatient_substance;
}
void
SWGVendoredPlanBulk::setOutpatientSubstance(QString* outpatient_substance) {
    this->outpatient_substance = outpatient_substance;
}

QString*
SWGVendoredPlanBulk::getPlanMarket() {
    return plan_market;
}
void
SWGVendoredPlanBulk::setPlanMarket(QString* plan_market) {
    this->plan_market = plan_market;
}

QString*
SWGVendoredPlanBulk::getPlanType() {
    return plan_type;
}
void
SWGVendoredPlanBulk::setPlanType(QString* plan_type) {
    this->plan_type = plan_type;
}

QString*
SWGVendoredPlanBulk::getPreferredBrandDrugs() {
    return preferred_brand_drugs;
}
void
SWGVendoredPlanBulk::setPreferredBrandDrugs(QString* preferred_brand_drugs) {
    this->preferred_brand_drugs = preferred_brand_drugs;
}

QString*
SWGVendoredPlanBulk::getPrenatalPostnatalCare() {
    return prenatal_postnatal_care;
}
void
SWGVendoredPlanBulk::setPrenatalPostnatalCare(QString* prenatal_postnatal_care) {
    this->prenatal_postnatal_care = prenatal_postnatal_care;
}

QString*
SWGVendoredPlanBulk::getPreventativeCare() {
    return preventative_care;
}
void
SWGVendoredPlanBulk::setPreventativeCare(QString* preventative_care) {
    this->preventative_care = preventative_care;
}

SWGNumber*
SWGVendoredPlanBulk::getPremiumSubsidized() {
    return premium_subsidized;
}
void
SWGVendoredPlanBulk::setPremiumSubsidized(SWGNumber* premium_subsidized) {
    this->premium_subsidized = premium_subsidized;
}

SWGNumber*
SWGVendoredPlanBulk::getPremium() {
    return premium;
}
void
SWGVendoredPlanBulk::setPremium(SWGNumber* premium) {
    this->premium = premium;
}

QString*
SWGVendoredPlanBulk::getPremiumSource() {
    return premium_source;
}
void
SWGVendoredPlanBulk::setPremiumSource(QString* premium_source) {
    this->premium_source = premium_source;
}

QString*
SWGVendoredPlanBulk::getPrimaryCarePhysician() {
    return primary_care_physician;
}
void
SWGVendoredPlanBulk::setPrimaryCarePhysician(QString* primary_care_physician) {
    this->primary_care_physician = primary_care_physician;
}

QString*
SWGVendoredPlanBulk::getRehabilitationServices() {
    return rehabilitation_services;
}
void
SWGVendoredPlanBulk::setRehabilitationServices(QString* rehabilitation_services) {
    this->rehabilitation_services = rehabilitation_services;
}

QString*
SWGVendoredPlanBulk::getServiceAreaId() {
    return service_area_id;
}
void
SWGVendoredPlanBulk::setServiceAreaId(QString* service_area_id) {
    this->service_area_id = service_area_id;
}

QString*
SWGVendoredPlanBulk::getSkilledNursing() {
    return skilled_nursing;
}
void
SWGVendoredPlanBulk::setSkilledNursing(QString* skilled_nursing) {
    this->skilled_nursing = skilled_nursing;
}

QString*
SWGVendoredPlanBulk::getSpecialist() {
    return specialist;
}
void
SWGVendoredPlanBulk::setSpecialist(QString* specialist) {
    this->specialist = specialist;
}

QString*
SWGVendoredPlanBulk::getSpecialtyDrugs() {
    return specialty_drugs;
}
void
SWGVendoredPlanBulk::setSpecialtyDrugs(QString* specialty_drugs) {
    this->specialty_drugs = specialty_drugs;
}

QString*
SWGVendoredPlanBulk::getUrgentCare() {
    return urgent_care;
}
void
SWGVendoredPlanBulk::setUrgentCare(QString* urgent_care) {
    this->urgent_care = urgent_care;
}

QString*
SWGVendoredPlanBulk::getVendorId() {
    return vendor_id;
}
void
SWGVendoredPlanBulk::setVendorId(QString* vendor_id) {
    this->vendor_id = vendor_id;
}



} /* namespace Swagger */

